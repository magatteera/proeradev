@model IEnumerable<proera.clients>

@{
    ViewBag.Title = "Index";
}
<br />
<h2>Mise en Service De Clients</h2>


@*<p>Mise en Service : </p>


    <div class="form-row">

        <div class="col">
            <div class="form-group">
                @Html.Label("Region", htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.DropDownList("regions", null, htmlAttributes: new { @class = "form-control" })
                </div>
            </div>

        </div>


        <div class="col">
            <div class="form-group">
                @Html.Label("Departement", htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.DropDownList("departements", null, htmlAttributes: new { @class = "form-control" })
                </div>
            </div>

        </div>


    </div>
    <br />
    <br />
    <div class="form-row">
        <div class="col">
            <div class="form-group">
                @Html.Label("Commune", htmlAttributes: new { @class = "control-label col" })
                <div class="col">
                    @Html.DropDownList("COMMUNE", null, htmlAttributes: new { @class = "form-control" })
                </div>
            </div>

        </div>
        <div class="col">
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="control-label col">Selectionnez le Village</label>
                    <div class="col">
                        @Html.DropDownList("villages", null, htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>
            </div>
        </div>
    </div>*@




<div class="card-body">
    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label>Regions</label>

                @Html.DropDownList("regions", null, htmlAttributes: new { @class = "form-control select2bs4 select2-hidden-accessible" })
            </div>
            <!-- /.form-group -->
            <div class="form-group">
                <label>Communes</label>

                @Html.DropDownList("COMMUNE", null, htmlAttributes: new { @class = "form-control select2bs4 select2-hidden-accessible" })
            </div>
            
            <!-- /.form-group -->
        </div>
        <!-- /.col -->
        <div class="col-md-6">
            <div class="form-group">
                <label>Departements</label>

                @Html.DropDownList("departements", null, htmlAttributes: new { @class = "form-control select2bs4 select2-hidden-accessible" })
            </div>
            <!-- /.form-group -->
            <div class="form-group">
                <label>Villages</label>

                @Html.DropDownList("villages", null, htmlAttributes: new { @class = "form-control select2bs4 select2-hidden-accessible" })
            </div>
            <!-- /.form-group -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label>Reference du client</label>
                <input type="text" id="rechercheref" class="form-control" />
            </div>
            <!-- /.form-group -->
            <div class="form-group">
                <button class="btn btn-success" type="button" id="btnrechercherref">Rechercher par Reference</button>
            </div>
            <!-- /.form-group -->
        </div>
        <!-- /.col -->
    </div>
</div>





<br />




<table class="table table-bordered table-striped" id="serviceTable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Nom1)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Prenom)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Tel)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Reference_Contrat)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NivPuissance)
            </th>
            <th>
                ACTION
            </th>
            <th></th>
        </tr>
    </thead>

    <tbody id="tablebody">
    </tbody>

</table>




<div class="modal fade" id="modalmiseenservice" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Mise En Service Client</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">
                    <hr />

                    <div class="form-group">
                        <label class="control-label col">Prenom</label>
                        <div class="col">
                            <input type="text" disabled class="form-control" name="prenom" id="prenom" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col">Nom</label>
                        <div class="col">
                            <input type="text" disabled class="form-control" name="nom" id="nom" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col">Reference</label>
                        <div class="col">
                            <input type="text" disabled class="form-control" name="referenceClient" id="referenceClient" />
                        </div>
                    </div>

                    <div class="form-group">

                        <label class="control-label col">Etat du Client</label>
                        <div class="col">
                            <select name="statut" id="statut" class="form-control">
                                <option selected value="EN SERVICE">EN SERVICE</option>
                                <option value="NON RACCORDABLE">NON RACCORDABLE</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col">Interface</label>
                        <div class="col">
                            <input type="text" required class="form-control" name="numcompteur" id="numcompteur" />
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col">Index de Pose</label>
                        <div class="col">
                            <input type="text" required class="form-control" name="indexDePose" id="indexDePose" />
                        </div>
                    </div>

                    <div class="form-group">

                        <label class="control-label col">Date Mise en Service</label>
                        <div class="col">
                            <input type="date" required class="form-control" name="dateMiseEnService" id="dateMiseEnService" />
                        </div>
                    </div>




                    <div class="form-group">
                        <label class="control-label col">Commentaire</label>
                        <div class="col">
                            <textarea class="form-control" name="commentaire" id="commentaire"></textarea>
                        </div>
                    </div>



                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" id="savemiseenservice" data-dismiss="modal" class="btn btn-primary">Enregistrer</button>
            </div>
        </div>
    </div>
</div>



<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-autocomplete/1.0.7/jquery.auto-complete.min.js" integrity="sha512-TToQDr91fBeG4RE5RjMl/tqNAo35hSRR4cbIFasiV2AAMQ6yKXXYhdSdEpUcRE6bqsTiB+FPLPls4ZAFMoK5WA==" crossorigin="anonymous"></script>*@
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/autocomplete.js/0.38.0/autocomplete.jquery.min.js" integrity="sha512-GU9ayf+66Xx2TmpxqJpliWbT5PiGYxpaG8rfnBEk1LL8l1KGkRShhngwdXK1UgqhAzWpZHSiYPc09/NwDQIGyg==" crossorigin="anonymous"></script>*@
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.devbridge-autocomplete/1.4.11/jquery.autocomplete.js" integrity="sha512-JwPA+oZ5uRgh1AATPhLKeByWbXcsRnMMSBpvhuAGQp+CWISl/fHecOshbRcPPgKWau9Wy1H5LhiwAa4QFiQKYw==" crossorigin="anonymous"></script>*@
<script>
    $(document).ready(function () {

        $("#villages").prepend("<option selected value=''>Selectionnez le Village</option>")

        @*$('#tablebody').DataTable({
            "language": {
                "url": "//cdn.datatables.net/plug-ins/1.10.21/i18n/French.json"
            }
        });*@

        $("#btnrechercherref").click(function () {
            data = {
                Reference_Contrat: $("#rechercheref").val()
            }
            $.ajax({
                type: "POST",
                url: "/clients/rechercheclimes",
                data: data,
                success: function (data2) {
                    $("#tablebody").empty().
                        append(data2)
                    @* $("#serviceTable").DataTable({
                        "language": {
                            "url": "//cdn.datatables.net/plug-ins/1.10.21/i18n/French.json"
                        }
                    });*@



                    $('[id^=btnmettreenService]').click(function (bouton) {
                        @* alert("clicked")
                        alert($('[id^=btnmettreenService]').val()) *@

                        $("#referenceClient").val($(this).val())
                        $("#modalmiseenservice").modal('show')
                    })
                },
                error: function () {
                    alert("Error occured!!")
                }
            });
        })




        $("#regions").change(function () {
            data = {
                id: $("#regions").val()
            }
            $.ajax({
                type: "POST",
                url: "/clients/changementregionmes",
                data: data,
                success: function (data) {
                    $("#departements").empty().
                        append(data.departement)
                    $("#COMMUNE").empty().
                        append(data.commune)
                    $("#codevillage").empty().
                        append(data.village)
                },
                error: function () {
                    swal("Erreur", "Une erreur s'est produite", "error")
                }
            });
        })

        function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        /* var auto = document.getElementById("numcompteur")
        var TAB = ["c++", "java", "php", "coldfusion", "javascript", "asp", "ruby"]
            autocomplete(document.getElementById("numcompteur"),TAB)

        $("#numcompteur").keyup(function () {
            data = {
                numerointerface: $("#numcompteur").val()
            }
            $.ajax({
                type: "POST",
                url: "/clients/getAutoNum",
                data: data,
                success: function (data) {-->
                    var auto = document.getElementById("numcompteur")
                    autocomplete(auto, ["c++", "java", "php", "coldfusion", "javascript", "asp", "ruby"])
                },
                error: function () {

                }
            });
        }) */


        $("#numcompteur").change(function () {
            data = {
                numerointerface: $("#numcompteur").val()
            }
            $.ajax({
                type: "POST",
                url: "/clients/verifNumCompteur",
                data: data,
                success: function (data) {
                    //alert(data)
                    if (data == "libre") {
                        $("#savemiseenservice").attr("disabled", false)
                    }
                    if (data == "occupe") {
                        swal("Erreur", "Ce compteur n'est pas libre", "error")
                        $("#savemiseenservice").attr("disabled", true)
                    }
                    if (data == "inexistant") {
                        swal("Erreur", "Ce numero de compteur est inexistant", "error")
                        $("#savemiseenservice").attr("disabled", true)
                    }
                },
                error: function () {
                    alert("Error occured!!")
                }
            });
        })


        $("#departements").change(function () {
            data = {
                code_departement: $("#departements").val()
            }
            $.ajax({
                type: "POST",
                url: "/clients/changementdepartementmes",
                data: data,
                success: function (data) {
                    $("#COMMUNE").empty().
                        append(data.commune)
                    $("#codevillage").empty().
                        append(data.village)
                },
                error: function () {
                    swal("Erreur", "Une erreur s'est produite", "error")
                }
            });
        })

        $("#COMMUNE").change(function () {
            data = {
                code_com: $("#COMMUNE").val()
            }
            $.ajax({
                type: "POST",
                url: "/clients/changementcommunemes",
                data: data,
                success: function (data) {
                    @*alert(data)*@
                    $("#villages").empty().
                        append(data)

                    $("#tablebody").empty()
                },
                error: function () {
                    alert("Error occured!!")
                }
            });
        })

        $("#villages").change(function () {
            data = {
                code_village: $("#villages").val()
            }
            $.ajax({
                type: "POST",
                url: "/clients/changementvillagemes",
                data: data,
                success: function (data2) {
                    $("#tablebody").empty().
                        append(data2)
                    @*$("#serviceTable").DataTable({
                        "language": {
                            "url": "//cdn.datatables.net/plug-ins/1.10.21/i18n/French.json"
                        }
                    });*@



                    $('[id^=btnmettreenService]').click(function (bouton) {
                        @*alert("clicked")
                        alert($('[id^=btnmettreenService]').val())*@
                        $.ajax({
                            type: "POST",
                            url: "/clients/donneesclients",
                            data: { "referenceClient": $(this).val() },
                            success: function (data) {
                                $("#nom").val(data.nom)
                                $("#prenom").val(data.prenom)
                            }
                        })

                        $("#referenceClient").val($(this).val())
                        $("#modalmiseenservice").modal('show')
                    })
                },
                error: function () {
                    alert("Error occured!!")
                }
            });
        })

        $("#savemiseenservice").click(function () {
            data = {
                numcompteur: $("#numcompteur").val(),
                indexDePose: $("#indexDePose").val(),
                dateMiseEnService: $("#dateMiseEnService").val(),
                referenceClient: $("#referenceClient").val(),
                statut: $("#statut").val()
            }


            $.ajax({
                type: "POST",
                url: "/clients/appliquerMiseEnService",
                data: data,
                success: function (data) {

                    swal(data)

                    $("#numcompteur").val("")

                    $("#indexDePose").val("")
                    $("#dateMiseEnService").val("")
                    $("#commentaire").val("")
                    $("#referenceClient").val("")

                    data2 = {
                        code_village: $("#villages").val()
                    }
                    $.ajax({
                        type: "POST",
                        url: "/clients/changementvillagemes",
                        data: data2,
                        success: function (data3) {
                            $("#tablebody").empty().
                                append(data3)



                            $('[id^=btnmettreenService]').click(function () {
                                @* alert("clicked")
                                alert($('[id^=btnmettreenService]').val()) *@
                                $("#referenceClient").val($('[id^=btnmettreenService]').val())
                                $("#modalmiseenservice").modal('show')
                            })
                        },
                        error: function () {
                            alert("Error occured!!")
                        }
                    });
                },
                error: function () {
                    alert("Error occured!!")
                }
            });

        })

        $("#statut").change(function () {
            if ($("#statut").val() == "NON RACCORDABLE") {
                $("#numcompteur").attr("disabled", true)
                $("#numcompteur").attr("required", false)

                $("#indexDePose").attr("disabled", true)
                $("#indexDePose").attr("required", false)

                $("#numcompteur").val("")
                $("#indexDePose").val("")
            } else {
                $("#numcompteur").attr("disabled", false)
                $("#numcompteur").attr("required", true)

                $("#indexDePose").attr("disabled", false)
                $("#indexDePose").attr("required", true)
            }
        })


    });
</script>